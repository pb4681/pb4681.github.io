<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F%E5%B8%83%E5%B1%80%20-%20%E5%89%AF%E6%9C%AC.html</url>
    <content type="text"><![CDATA[所谓圣杯布局和双飞翼布局其实解决的问题是相同的，都是解决左右两栏固定宽度，中间部分自适应，其中某部分内容比其他内容高的时候，保证三者元素等高。他俩的区别就是：圣杯用padding。双飞翼用在main外层多加了一个div然后改用margin。最好用圣杯和flex弹性布局 圣杯布局123456789101112131415161718192021222324&lt;div class="header"&gt; &lt;h4&gt;header&lt;/h4&gt;&lt;/div&gt;&lt;div class="container"&gt; &lt;div class="middle"&gt; &lt;h4&gt;middle&lt;/h4&gt; &lt;p&gt;middle-content&lt;/p&gt; &lt;/div&gt; &lt;div class="left"&gt; &lt;h4&gt;left&lt;/h4&gt; &lt;p&gt;left-content&lt;/p&gt; &lt;/div&gt; &lt;div class="right"&gt; &lt;h4&gt;right&lt;/h4&gt; &lt;p&gt;right-content&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt; &lt;h4&gt;footer&lt;/h4&gt;&lt;/div&gt; 1234567891011121314151617181920212223242526272829303132333435.header, .footer &#123; border: 1px solid #333; background: #ccc; text-align: center;&#125;.footer &#123; clear: both;&#125;.container &#123; min-width: 400px; //如果不设置最小宽度布局会错乱 padding:0 220px 0 200px; overflow: hidden;&#125;.left, .middle, .right &#123; position: relative; float: left; min-height: 130px;&#125;.middle &#123; width: 100%; background: blue;&#125;.left &#123; margin-left: -100%; left: -200px; width: 200px; background: red;&#125;.right &#123; margin-left: -220px; right: -220px; width: 220px; background: green;&#125; 实现思路：1.container先预留出padding左右两边的距离2.因为float关系，middle会占据container空简，把left和right挤到下一行3.设置margin-left：-100%上浮 然后position：relative；left：自身距离4.right也是一样5.注意若不设置min-width：布局会错乱 双飞翼布局这个坑：一直不理解为什么margin-left：-100%就会跑到上面一行：是在文档流中之前一直margin-left不到上一行是因为中间main没有设置float：left在main多一个内容1234567&lt;div class="container"&gt; &lt;div class="main"&gt; &lt;div class="main-content"&gt;中间栏&lt;/div&gt; &lt;/div&gt; &lt;div class="left"&gt;左边栏&lt;/div&gt; &lt;div class="right"&gt;右边栏&lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233body&#123; margin: 0; padding: 0; &#125; .container&#123; min-width: 400px; background-color: red; height: 200px; &#125; .left,.right&#123; width: 200px; height: 200px; background-color: yellow; float: left; &#125; .main&#123; float: left; width: 100%; height: 200px; background-color: green; &#125; .main-content&#123; margin: 0 200px; &#125; .left&#123; margin-left: -100%; &#125; .right&#123; margin-left: -200px; &#125; flex布局直接设置display：flex在中间容器中设置flex：1注意：中间那块要在中间1234567&lt;header id="header"&gt;header&lt;/header&gt;&lt;section id="content"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="main"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/section&gt;&lt;footer id="footer"&gt;footer&lt;/footer&gt; 12345678910111213141516171819202122232425262728293031*&#123; padding: 0; margin: 0; &#125; #header&#123; width: 100%; height: 50px; background-color: gray; &#125; #footer&#123; width: 100%; height: 50px; background-color: gray; &#125; #content&#123; display: flex; &#125; #content .main&#123; flex:1; background-color: red; &#125; #content .left&#123; width: 200px; height: 400px; background-color: green; &#125; #content .right&#123; width: 200px; height: 400px; background-color: green; &#125;]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>css，布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6中Class属性]]></title>
    <url>%2FES6%E4%B8%ADClass%E5%B1%9E%E6%80%A7.html</url>
    <content type="text"><![CDATA[参考文献：阮一峰 classjs之前是这样面向对象12345678910111213//1.构造函数 function Person(name,age)&#123; this.name = name; this.age = age; &#125; Person.prototype = &#123; constructor : Person, print()&#123; console.log('我叫'+this.name +',今年'+this.age+'岁'); &#125; &#125;; let person = new Person("组八戒",18); console.log(person); 若要调用prototype原型属性节点的话直接console.log(person.print());这个会直接打印出我是猪八。。 通过class面向对象 1234567891011121314// 2.实用class构造class Person&#123; constructor(name,age)&#123; this.name = name; this.age = age; &#125; print()&#123; console.log('我叫'+this.name +',今年'+this.age+'岁'); &#125; &#125; let person = new Person('猪八戒',18); console.log(person); console.log(person.print()); 它其实还是个函数，只是它的方法是放在外部的可以直接引用。 html: &lt;canvas id=&quot;canvas&quot;&gt;当前的浏览器不支持该版本!&lt;/canvas&gt; javascript 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475// 1. 获取当前的画布 const canvas = document.getElementById('canvas'); const ctx = canvas.getContext('2d'); canvas.width = 1000; canvas.height = 600; canvas.style.backgroundColor = '#000'; // 2.小球类 class Ball&#123; /** * 构造器 */ constructor(x, y, color)&#123; this.x = x; this.y = y; this.color = color; this.r = 40; &#125; /** * 绘制小球 */ render()&#123; ctx.save(); ctx.beginPath(); ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2); ctx.fillStyle = this.color; ctx.fill(); ctx.restore(); &#125; &#125; // 3.会移动的小球类 class MoveBall extends Ball&#123; constructor(x, y, color)&#123; super(x, y, color); // 量的变化 this.dX = _.random(-5, 5); this.dY = _.random(-5, 5); this.dR = _.random(1, 3); &#125; upDate()&#123; this.x += this.dX; this.y += this.dY; this.r -= this.dR; if(this.r &lt; 0)&#123; this.r = 0; &#125; &#125; &#125; // 4. 实例化小球 let ballArr = []; let colorArr = ['red', 'green', 'blue', 'yellow', 'purple', 'pink', 'orange']; // 5. 监听鼠标的移动 canvas.addEventListener('mousemove', function (e) &#123; ballArr.push( new MoveBall(e.offsetX, e.offsetY, colorArr[_.random(0, colorArr.length-1)])); // console.log(ballArr); &#125;); // 6.开启定时器 setInterval(function () &#123; // 清屏 ctx.clearRect(0, 0, canvas.width, canvas.height); // 绘制 for(let i=0; i&lt;ballArr.length; i++)&#123; ballArr[i].render(); ballArr[i].upDate(); &#125; &#125;, 50);]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Class</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三栏布局之鸡翅布局、圣杯布局和flex弹性布局]]></title>
    <url>%2F%E5%B8%83%E5%B1%80.html</url>
    <content type="text"><![CDATA[所谓圣杯布局和双飞翼布局其实解决的问题是相同的，都是解决左右两栏固定宽度，中间部分自适应，其中某部分内容比其他内容高的时候，保证三者元素等高。他俩的区别就是：圣杯用padding。双飞翼用在main外层多加了一个div然后改用margin。最好用圣杯和flex弹性布局 圣杯布局123456789101112131415161718192021222324&lt;div class="header"&gt; &lt;h4&gt;header&lt;/h4&gt;&lt;/div&gt;&lt;div class="container"&gt; &lt;div class="middle"&gt; &lt;h4&gt;middle&lt;/h4&gt; &lt;p&gt;middle-content&lt;/p&gt; &lt;/div&gt; &lt;div class="left"&gt; &lt;h4&gt;left&lt;/h4&gt; &lt;p&gt;left-content&lt;/p&gt; &lt;/div&gt; &lt;div class="right"&gt; &lt;h4&gt;right&lt;/h4&gt; &lt;p&gt;right-content&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="footer"&gt; &lt;h4&gt;footer&lt;/h4&gt;&lt;/div&gt; 1234567891011121314151617181920212223242526272829303132333435.header, .footer &#123; border: 1px solid #333; background: #ccc; text-align: center;&#125;.footer &#123; clear: both;&#125;.container &#123; min-width: 400px; //如果不设置最小宽度布局会错乱 padding:0 220px 0 200px; overflow: hidden;&#125;.left, .middle, .right &#123; position: relative; float: left; min-height: 130px;&#125;.middle &#123; width: 100%; background: blue;&#125;.left &#123; margin-left: -100%; left: -200px; width: 200px; background: red;&#125;.right &#123; margin-left: -220px; right: -220px; width: 220px; background: green;&#125; 实现思路：1.container先预留出padding左右两边的距离2.因为float关系，middle会占据container空简，把left和right挤到下一行3.设置margin-left：-100%上浮 然后position：relative；left：自身距离4.right也是一样5.注意若不设置min-width：布局会错乱 双飞翼布局这个坑：一直不理解为什么margin-left：-100%就会跑到上面一行：是在文档流中之前一直margin-left不到上一行是因为中间main没有设置float：left在main多一个内容1234567&lt;div class="container"&gt; &lt;div class="main"&gt; &lt;div class="main-content"&gt;中间栏&lt;/div&gt; &lt;/div&gt; &lt;div class="left"&gt;左边栏&lt;/div&gt; &lt;div class="right"&gt;右边栏&lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233body&#123; margin: 0; padding: 0; &#125; .container&#123; min-width: 400px; background-color: red; height: 200px; &#125; .left,.right&#123; width: 200px; height: 200px; background-color: yellow; float: left; &#125; .main&#123; float: left; width: 100%; height: 200px; background-color: green; &#125; .main-content&#123; margin: 0 200px; &#125; .left&#123; margin-left: -100%; &#125; .right&#123; margin-left: -200px; &#125; flex布局直接设置display：flex在中间容器中设置flex：1注意：中间那块要在中间1234567&lt;header id="header"&gt;header&lt;/header&gt;&lt;section id="content"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="main"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/section&gt;&lt;footer id="footer"&gt;footer&lt;/footer&gt; 12345678910111213141516171819202122232425262728293031*&#123; padding: 0; margin: 0; &#125; #header&#123; width: 100%; height: 50px; background-color: gray; &#125; #footer&#123; width: 100%; height: 50px; background-color: gray; &#125; #content&#123; display: flex; &#125; #content .main&#123; flex:1; background-color: red; &#125; #content .left&#123; width: 200px; height: 400px; background-color: green; &#125; #content .right&#123; width: 200px; height: 400px; background-color: green; &#125;]]></content>
      <categories>
        <category>前端笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>css，布局</tag>
      </tags>
  </entry>
</search>
